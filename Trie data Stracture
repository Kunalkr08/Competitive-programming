#include<bits/stdc++.h>
using namespace std;
#define ll long long

class TrieNode{
    public: 
        TrieNode* child[26];
        bool isEnd;
        TrieNode(){
           for(ll i=0; i<26; i++){
              child[i]=NULL;
           }
           isEnd=false;
        }
};

TrieNode* head=new TrieNode();

void insert(string &s){
     TrieNode* temp=head;
     for(auto c: s){
         if(temp->child[c-'a']==NULL){
             TrieNode* newNode=new TrieNode();
             temp->child[c-'a']=newNode;
         }
         temp=temp->child[c-'a'];
     }
     temp->isEnd=true;
}

ll isPrefix(string &s){
    TrieNode* temp=head;
    ll cnt=0;
    for(auto c: s){
       if(temp->child[c-'a']!=NULL){
           temp=temp->child[c-'a'];
       }
       else{
           break;
       }
       cnt++;
    }
    return cnt;
}
int main(){ 
     
     ll n;
     cin>>n;
     vector<string>a(n);
     for(ll i=0; i<n; i++){
         cin>>a[i];
     }

     insert(a[0]);
     ll ans=1e12;
     for(ll i=1; i<n; i++){
         ans=min(ans,isPrefix(a[i]));
     }
     cout<<a[0].substr(0,ans)<<endl;
     return 0;
}






/// 2nd implementation of Trie data stracture





struct TrieNode{
         int count;
         TrieNode* childNode[26];
         int wordEnd;
         TrieNode(){
             for(int i=0; i<26; i++){
                 childNode[i]=NULL;
             }
             count=0;
             wordEnd=0;
         }
    };

    TrieNode* root=new TrieNode();

    void insert(string &s){
        // Write your code here.
        TrieNode* currentNode=root;

        for(auto c: s){
            if(currentNode->childNode[c-'a']==NULL){
                TrieNode* newNode=new TrieNode();
                currentNode->childNode[c-'a']=newNode;
            }
            
            currentNode=currentNode->childNode[c-'a'];
            currentNode->count++;
        }

        currentNode->wordEnd++;
    }

    int countWordsEqualTo(string &s){
        // Write your code here.
        
        TrieNode* currentNode=root;
        for(auto c: s){
            if(currentNode->childNode[c-'a']==NULL){
                return 0;
            }
            currentNode=currentNode->childNode[c-'a'];
        }
        

        int ans=0;
        if(currentNode->wordEnd){
            ans=currentNode->count;
        }
        return ans;
    }

    int countWordsStartingWith(string &s){
        // Write your code here.
        TrieNode* currentNode=root;
        for(auto c: s){
            if(currentNode->childNode[c-'a']==NULL){
                return 0;
            }
            currentNode=currentNode->childNode[c-'a'];
        }
      
        return currentNode->count;
    }

    void erase(string &s){

         TrieNode* currentNode=root;
         for(auto c: s){
             if(currentNode->childNode[c-'a']){
                 currentNode=currentNode->childNode[c-'a'];
                 currentNode->count--;
             }
             else{
                 return;
             }
         }

         currentNode->wordEnd--;
    }
