   struct TrieNode{
         int count;
         TrieNode* childNode[26];
         int wordEnd;
         TrieNode(){
             for(int i=0; i<26; i++){
                 childNode[i]=NULL;
             }
             count=0;
             wordEnd=0;
         }
    };

    TrieNode* root=new TrieNode();

    void insert(string &s){
        // Write your code here.
        TrieNode* currentNode=root;

        for(auto c: s){
            if(currentNode->childNode[c-'a']==NULL){
                TrieNode* newNode=new TrieNode();
                currentNode->childNode[c-'a']=newNode;
            }
            
            currentNode=currentNode->childNode[c-'a'];
            currentNode->count++;
        }

        currentNode->wordEnd++;
    }

    int countWordsEqualTo(string &s){
        // Write your code here.
        
        TrieNode* currentNode=root;
        for(auto c: s){
            if(currentNode->childNode[c-'a']==NULL){
                return 0;
            }
            currentNode=currentNode->childNode[c-'a'];
        }
        

        int ans=0;
        if(currentNode->wordEnd){
            ans=currentNode->count;
        }
        return ans;
    }

    int countWordsStartingWith(string &s){
        // Write your code here.
        TrieNode* currentNode=root;
        for(auto c: s){
            if(currentNode->childNode[c-'a']==NULL){
                return 0;
            }
            currentNode=currentNode->childNode[c-'a'];
        }
      
        return currentNode->count;
    }

    void erase(string &s){

         TrieNode* currentNode=root;
         for(auto c: s){
             if(currentNode->childNode[c-'a']){
                 currentNode=currentNode->childNode[c-'a'];
                 currentNode->count--;
             }
             else{
                 return;
             }
         }

         currentNode->wordEnd--;
    }
