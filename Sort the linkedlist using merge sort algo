#include<bits/stdc++.h>
using namespace std;
using ll=long long;
class Node{
    public:
       int val;
       Node* next;
       Node(int val){
          this->val=val;
          next=NULL;
       }
};

void print(Node* head){
     while(head!=NULL){
         cout<<head->val<<" ";
         head=head->next;
     }
     cout<<endl;
}

Node* findmiddle(Node* head){
      if(head==NULL || head->next==NULL) return head;

      Node* slow=head;
      Node* fast=head;

      while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
      }
      return slow;
}

Node* merge(Node* List1, Node* List2){
      Node* dummyNode=new Node(-1);
      Node* temp=dummyNode;
      while(List1!=NULL && List2!=NULL){
           if(List1->val<=List2->val){
              temp->next=List1;
              List1=List1->next;
           }
           else{
              temp->next=List2;
              List2=List2->next;
           }
           temp=temp->next;
      }

      if(List1!=NULL){
          temp->next=List1;
      }
      else if(List2!=NULL){
          temp->next=List2;
      }

      return dummyNode->next;
}

Node* sortLinklist(Node* head){
      if(head==NULL || head->next==NULL) return head;

      Node* middle=findmiddle(head);
      Node* right=middle->next;
      middle->next=NULL;
      Node* left=head;

      left=sortLinklist(left);
      right=sortLinklist(right);

      return merge(left,right);
}
void solve(){
     int n;
     cin>>n;
     vector<int>a(n);
     for(int i=0; i<n; i++){
          cin>>a[i];
     }

     Node* head=new Node(a[0]);
     Node* temp=head;
     for(int i=1; i<n; i++){
         temp->next=new Node(a[i]);
         temp=temp->next;
     }

     Node* x=sortLinklist(head);
     print(x);

}
int main(){ 
     int t;
     cin>>t;
     while(t--){
       solve();
     }
     return 0;
}
