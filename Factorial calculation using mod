#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>ords; // find_by_order, order_of_key
#define ll int
#define mod 1000000007
const int N = 2e5+5;
#define inf 1e9
#define ff first
#define ss second
#define fr(i,n) for(ll i = 0; i<n; i++)
#define pb push_back
#define PI 3.141592653589793238462
#define set_bits __builtin_popcount
#define all(s) sort(s.begin(), s.end())
#define Val(s) (s.begin(), s.end())
#define rev(s) reverse(s.begin(),s.end())
#define runf ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
//ll inv(ll i) {if (i == 1) return 1; return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;}
ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}
ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}
ll mod_sub(ll a, ll b) {a = a % mod; b = b % mod; return (((a - b + mod) % mod) + mod) % mod;}
/// if in some question it is mentioned that to "find min" or 
/// or "find maximum" or find "number of ways" then there is chance 
/// that problem is solved using dp

vector<ll>fac(N),inv(N);

ll power(ll x, ll y){
   ll result=1;
   while(y>0){
      if(y%2){
         result=(result*1LL*x)%mod;
      }
      x=(x*1LL*x)%mod;
      y/=2;
   }
   return result;
}
void solve(){
     fac[0]=1;
     for(ll i=1; i<=N; i++){
         fac[i]=(fac[i-1]*1LL*i)%mod;
     }

     inv[0]=1;
     for(ll i=1; i<=N; i++){
         inv[i]=(inv[i-1]*1LL*power(i,mod-2))%mod;
     }
}

ll calculate(ll n, ll r){
   if(n<r) return 0;
   ll result=((fac[n]%mod*1LL*inv[n-r]%mod)%mod*1LL*inv[r]%mod)%mod;
   return result%mod;
}
int main(){ 
     runf // must be disabled in interactive question
     solve();
     int t;
     cin>>t;
     while(t--){
          ll n,k;
          cin>>n>>k;
          vector<ll>a(n);
          for(ll i=0; i<n; i++){
               cin>>a[i];
          }
          

          ll cntz=0,cnto=0;
          for(ll i=0; i<n; i++){
              if(a[i]==1){
                  cnto++;
              }
              else{
                  cntz++;
              }
          }

          ll ans=0;
          ll r=(k+1)/2;

          for(ll i=r; i<=k; i++){
              ll x=((calculate(cnto,i)%mod)*1LL*(calculate(cntz,k-i)%mod))%mod;
              ans=(ans%mod+x%mod)%mod;
          }
          cout<<ans<<endl;
     }
     return 0;
}
