#include <bits/stdc++.h>
using namespace std;
#define ll long long

/*
   Program to implement heap sort
*/
void heapify(vector<ll>&a, ll n, ll id){
	 ll index=id;
	 ll left=2*index+1;
	 ll right=2*index+2;
	 if(left<n && a[left]>a[id]){
	 	id=left;
	 }
	 if(right<n && a[right]>a[id]){
	 	id=right;
	 }
	 if(index!=id){
	 	 swap(a[index],a[id]);
	 	 heapify(a, n, id);
	 }
}

void heap_sort(vector<ll>&a, ll n){
	 //build max heap
	 for(ll i=(n/2)-1; i>=0; i--){
         heapify(a, n, i);
	 }
     
     // sort the array by calling heapify function
	 for(ll i=n-1; i>=0; i--){
	 	swap(a[0],a[i]);
	 	heapify(a, i, 0);
	 }
}
int main() {
    ll n;
    cin>>n;
    vector<ll>a(n);
    for(auto &it : a) cin>>it;
    heap_sort(a,n);
    for(auto it: a) cout<<it<<" ";
    return 0;
}

// Time Complexity is O(Nlog(N))
// Space Complexxity is O(log2(N)) using recursive heapify 
// but we can reduce it to O(1) by using while loop


This implementation is done by me
...................................................................................................................................................................




#include<bits/stdc++.h>
using namespace std;
#define ll long long

void heapify(vector<ll>&a, ll n, ll i){
     ll largest=i;
     ll left=2*i+1;
     ll right=2*i+2;

     if(left<n && a[largest]<a[left]){
         largest=left;
     }
     if(right<n && a[largest]<a[right]){
         largest=right;
     }

     if(largest!=i){
         swap(a[i],a[largest]);
         heapify(a, n, largest);
     }
}

void heap_sort(vector<ll>&a, ll n){
     // build heap
     for(ll i=(n/2-1); i>=0; i--){
         heapify(a, n, i);
     }

     // one by one extract element from heap
     // I do it for sorting of the array element
     for(ll i=n-1; i>=0; i--){
         // move current element to end
         swap(a[0],a[i]);
         // call heapfiy function on reduce heap
         heapify(a, i, 0);
     }
}
int main(){
    ll n;
    cin>>n;
    vector<ll>a(n);
    for(ll i=0; i<n; i++){
       cin>>a[i];
    }

    heap_sort(a, n);
    for(auto it: a){
        cout<<it<<" ";
    }
    return 0;
}


// Time complexity is O(Nlog(N));
// Space Complexity is O(1);
