//min max refers that the question is of binary search //

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007
const int N = 2e5 + 5;
#define ff first
#define ss second
#define fr(i,n) for(ll i = 0; i<n; i++)
#define pb push_back
#define PI 3.141592653589793238462
#define set_bits __builtin_popcount
#define all(s) sort(s.begin(), s.end())
#define runf ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
int prime[32005];

class SGTree{
   vector<int>seg;
   public: 
   SGTree(int n){
      seg.resize(4*n+1);
      return;
   }
   // segment tree
  void build(int ind, int low, int high, int arr[]){
     if(low==high){
        seg[ind]=arr[low];
        return;
     }

     int mid=(low+high)/2;
     build(2*ind+1, low, mid,  arr);
     build(2*ind+2, mid+1, high, arr);
     seg[ind]=min(seg[2*ind+1], seg[2*ind+2]);
  }

  int query(int ind, int low, int high, int l, int r){
     //no overlapping
     //l r low high or low high l r
     if(r<low || high<l) return INT_MAX;

     //complete overlap
     //[l low, high r]
     if(low>=l && high<=r) return seg[ind];

       int mid=(low+high)/2;
       int left=query(2*ind+1, low, mid, l, r);
       int right=query(2*ind+2, mid+1, high, l, r);
       return min(left, right);
   }

   void update(int ind, int low, int high, int i, int val){
     if(low==high){
        seg[ind]=val;
       return;
     }

     int mid=(low+high)/2;
     if(i<=mid) update(2*ind+1, low, mid, i, val);
     else update(2*ind+2, mid+1, high, i, val);
     seg[ind]=min(seg[2*ind+1], seg[2*ind+2]);
    }
};

int main() { 
     runf
     int n,q;
     cin>>n>>q;
     int arr[n];
     for(int i=0; i<n; i++){
        cin>>arr[i];
     }
     SGTree s1(n);
     s1.build(0, 0, n-1, arr);
     //cout<<seg[0]<<endl;
     while(q--){
       int type;
       cin>>type;
       if(type==2){
         int l,r;
         cin>>l>>r;
         cout<<s1.query(0,0,n-1,l-1,r-1)<<endl;
       }
       else{
         int i,val;
         cin>>i>>val;
         s1.update(0,0,n-1,i-1,val);
         arr[i]=val;
       }
     }
     return 0;
}
