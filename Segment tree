#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
class segtree{
   public: 
      vector<ll>seg;
      segtree(ll n){
         seg.resize(4*n);
      }

      ll combine(ll p1, ll p2){
         return min(p1,p2);
      }

      void build(vector<ll>&a, ll node, ll start, ll end){
           if(start==end){
              seg[node]=a[start];
              return;
           }

           ll mid=(start+end)/2;
           build(a, 2*node+1, start, mid);
           build(a, 2*node+2, mid+1, end);

           seg[node]=combine(seg[2*node+1],seg[2*node+2]);
      }

      void update(vector<ll>&a, ll node, ll start, ll end, ll id, ll val){
           if(start==end){
              a[id]=val;
              seg[node]=val;
              return;
           }
           ll mid=(start+end)/2;
           if(id>=start && id<=mid){
              update(a, 2*node+1, start, mid, id, val);
           }
           else{
              update(a, 2*node+2, mid+1, end, id, val);
           }

           seg[node]=combine(seg[2*node+1],seg[2*node+2]);
      }

      ll query(ll node, ll start, ll end, ll left, ll right){
           if(right<start || left>end) return 1e12;
           if(left<=start && end<=right){
               return seg[node];
           }
           ll mid=(start+end)/2;
           ll q1=query(2*node+1, start, mid, left, right);
           ll q2=query(2*node+2, mid+1, end, left, right);
           return combine(q1,q2);
      }
};
int main(){ 
     ll n,q;
     cin>>n>>q;
     vector<ll>a(n);
     for(ll i=0; i<n; i++){
        cin>>a[i];
     }
     segtree s(n+1);
     s.build(a, 0, 0, n-1);
     while(q--){
         ll p;
         cin>>p;
         if(p==1){
            ll k,u;
            cin>>k>>u;
            k--;
            s.update(a, 0, 0, n-1, k, u);
         }
         else{
            ll x,y;
            cin>>x>>y;
            x--,y--;
            ll q=s.query(0, 0, n-1, x, y);
            cout<<q<<endl;
         }
     }
     return 0;
}
