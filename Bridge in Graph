#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>ords; // find_by_order, order_of_key
#define ll long long
#define mod 1000000007
const int N = 2e5+5;
#define inf 1e9
#define ff first
#define ss second
#define fr(i,n) for(ll i = 0; i<n; i++)
#define pb push_back
#define PI 3.141592653589793238462
#define set_bits __builtin_popcount
#define all(s) sort(s.begin(), s.end())
#define Val(s) (s.begin(), s.end())
#define rev(s) reverse(s.begin(),s.end())
#define runf ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
ll inv(ll i) {if (i == 1) return 1; return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;}
ll mod_mul(ll a, ll b) {a = a % mod; b = b % mod; return (((a * b) % mod) + mod) % mod;}
ll mod_add(ll a, ll b) {a = a % mod; b = b % mod; return (((a + b) % mod) + mod) % mod;}
ll mod_sub(ll a, ll b) {a = a % mod; b = b % mod; return (((a - b + mod) % mod) + mod) % mod;}
/// if in some question it is mentioned that to "find min" or 
/// or "find maximum" or find "number of ways" then there is chance 
/// that problem is solved using dp

void dfs(ll node, ll par, ll &timer, vector<vector<ll>>&adj, vector<ll>&vis, vector<ll>&in, vector<ll>&low){
     vis[node]=1;
     in[node]=low[node]=timer;
     timer++;
     for(auto it: adj[node]){
         if(it==par) continue;
         if(vis[it]==1){
             // condition of back edges
             low[node]=min(low[node],low[it]);
         }
         else{
             // check the bridge of graph
             dfs(it,node,timer,adj,vis,in,low);
             if(low[it]>in[node]){
                cout<<node<<" "<<it<<endl;
             }
             low[node]=min(low[node],low[it]);
         }
     }
}
int main(){ 
     runf // must be disabled in interactive question
     ll n,m;
     cin>>n>>m;
     vector<vector<ll>>adj(n);
     for(ll i=0; i<m; i++){
         ll x,y;
         cin>>x>>y;
         adj[x].push_back(y);
         adj[y].push_back(x);
     }
     vector<ll>vis(n),in(n),low(n);
     ll timer=0;
     dfs(0,-1,timer,adj,vis,in,low);
     return 0;
}
